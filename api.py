import streamlit as st
from PIL import Image

# requirements 

from mapping import *


import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt

import seaborn as sns 
import plotly_express as px

from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.preprocessing import StandardScaler,OneHotEncoder,LabelBinarizer
from sklearn.compose import make_column_transformer

from sklearn.decomposition import PCA
from sklearn.cluster import KMeans 

from sklearn.linear_model import LogisticRegression, RidgeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import accuracy_score, confusion_matrix, f1_score


from IPython.display import display, HTML 

css = """
.output {
    flex-direction: row;
}
"""

HTML('<style>{}</style>'.format(css))



data_url = ("data_to_API.csv")

st.markdown("# We will explore the  dataset \"drugs  consumers\" to predict if a student is taking drugs currently or will use it eventually" )


st.markdown("Our dataset features this drugs which are estimated to be the most dangerous :")


st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Alcohol", unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Amph√©tamine", unsafe_allow_html=True)      
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Benzodiazepine",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Cannabis ",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Cocaine   ",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Crack ",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Ectasy ",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Heroin",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Ketamine ",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; LSD ",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Methadone ",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Magic Mushrooms ",unsafe_allow_html=True)
st.markdown("&nbsp;&nbsp;&nbsp;&#x2022; Nicotine ",unsafe_allow_html=True)

st.markdown('''
<style>
[data-testid="stMarkdownContainer"] ul{
    padding-left:40px;
}
</style>
''', unsafe_allow_html=True)



st.markdown('If you took one of those')

st.markdown("You can see a visualisation generated by an ACP which put on the same graph all the individuals of the dataset as points ")

'''@st.cache(allow_output_mutation = True )
def load_model():
    model = '''
    

    
 
 
    
#code X_train, Y train etc 

X_train = pd.read_csv('X_train.csv')
X_test = pd.read_csv('X_test.csv')

countries = ['Country_Australia', 'Country_Canada', 'Country_Other', 'Country_UK',
       'Country_USA']
ethnicities = ['Ethnicity_Asian', 'Ethnicity_Black', 'Ethnicity_Other',
       'Ethnicity_White', 'Ethnicity_White-Asian', 'Ethnicity_White-Black']


# we can add a new row 

#predict your frequence of consumption  of alcohol

dict_new_row = {}

list_values = []

age = st.number_input('Insert your age ',min_value = 0,step = 1)
list_values.append(age)

gender = st.selectbox('What gender are you',('Male','Female'))
if(gender == "male "):
        list_values.append(0)
else :
        list_values.append(1)

Stress_score = st.number_input('Rate your stress (%)',min_value = 0,max_value = 100)
list_values.append(Stress_score)

csore = st.number_input("Rate how rigorous you are (%)",min_value = 0,max_value = 100)
list_values.append(csore)

communicative_score = st.number_input("Rate how communicative you are (%)",min_value = 0,max_value = 100)
list_values.append(communicative_score)

impulsive_score = st.number_input('Rate your impulsivity on a scale of 100',min_value = 0,max_value = 100)
st.write('Your impulsivity score is : ', impulsive_score)
list_values.append(impulsive_score)


list_values.extend([0]*(len(countries) + len(ethnicities)))


country = st.selectbox('Select you country',set(countries))
ethnicity = st.selectbox('Select you ethnicity',set(ethnicities))



dict_new_row = dict(zip(list(X_test.columns),list_values))
dict_new_row[country] = 1
dict_new_row[ethnicity] = 1
dict_new_row

st.write(dict_new_row)





